name: Build Executables (Flexible)

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  APP_NAME: '24fire-cli'

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            artifact_name: 24fire-cli.exe
            asset_name: 24fire-cli-windows.exe
          - os: ubuntu-latest
            artifact_name: 24fire-cli
            asset_name: 24fire-cli-linux
          - os: macos-latest
            artifact_name: 24fire-cli
            asset_name: 24fire-cli-macos
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Check for Poetry
      id: check-poetry
      run: |
        if [ -f "pyproject.toml" ]; then
          echo "use_poetry=true" >> $GITHUB_OUTPUT
        else
          echo "use_poetry=false" >> $GITHUB_OUTPUT
        fi
      shell: bash
        
    - name: Install Poetry
      if: steps.check-poetry.outputs.use_poetry == 'true'
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Install dependencies with Poetry
      if: steps.check-poetry.outputs.use_poetry == 'true'
      run: |
        poetry install --no-interaction
        poetry add --group dev pyinstaller
        
    - name: Install dependencies with pip
      if: steps.check-poetry.outputs.use_poetry == 'false'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build executable (Windows) - Poetry
      if: matrix.os == 'windows-latest' && steps.check-poetry.outputs.use_poetry == 'true'
      run: |
        poetry run pyinstaller --onefile --name=${{ env.APP_NAME }} --console --add-data ".env;." --hidden-import=dotenv --hidden-import=requests --optimize=2 main.py
        
    - name: Build executable (Unix) - Poetry
      if: matrix.os != 'windows-latest' && steps.check-poetry.outputs.use_poetry == 'true'
      run: |
        poetry run pyinstaller --onefile --name=${{ env.APP_NAME }} --console --add-data ".env:." --hidden-import=dotenv --hidden-import=requests --optimize=2 main.py
        
    - name: Build executable (Windows) - pip
      if: matrix.os == 'windows-latest' && steps.check-poetry.outputs.use_poetry == 'false'
      run: |
        pyinstaller --onefile --name=${{ env.APP_NAME }} --console --add-data ".env;." --hidden-import=dotenv --hidden-import=requests --optimize=2 main.py
        
    - name: Build executable (Unix) - pip
      if: matrix.os != 'windows-latest' && steps.check-poetry.outputs.use_poetry == 'false'
      run: |
        pyinstaller --onefile --name=${{ env.APP_NAME }} --console --add-data ".env:." --hidden-import=dotenv --hidden-import=requests --optimize=2 main.py
        
    - name: Test executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        dist\${{ env.APP_NAME }}.exe --help
        
    - name: Test executable (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x dist/${{ env.APP_NAME }}
        ./dist/${{ env.APP_NAME }} --help
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: dist/${{ matrix.artifact_name }}
        retention-days: 30
        
    - name: Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/${{ matrix.artifact_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}